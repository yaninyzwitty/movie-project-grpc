// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc3
// source: movie_proto.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUsers_FullMethodName = "/moviebase.UserService/CreateUsers"
	UserService_GetUser_FullMethodName     = "/moviebase.UserService/GetUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateUserRequest, CreateUsersResponse], error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateUserRequest, CreateUsersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_CreateUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateUserRequest, CreateUsersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_CreateUsersClient = grpc.ClientStreamingClient[CreateUserRequest, CreateUsersResponse]

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	CreateUsers(grpc.ClientStreamingServer[CreateUserRequest, CreateUsersResponse]) error
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUsers(grpc.ClientStreamingServer[CreateUserRequest, CreateUsersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).CreateUsers(&grpc.GenericServerStream[CreateUserRequest, CreateUsersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserService_CreateUsersServer = grpc.ClientStreamingServer[CreateUserRequest, CreateUsersResponse]

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebase.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUsers",
			Handler:       _UserService_CreateUsers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "movie_proto.proto",
}

const (
	CategoryService_CreateCategories_FullMethodName = "/moviebase.CategoryService/CreateCategories"
)

// CategoryServiceClient is the client API for CategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryServiceClient interface {
	CreateCategories(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCategoryRequest, CreateCategoriesResponse], error)
}

type categoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryServiceClient(cc grpc.ClientConnInterface) CategoryServiceClient {
	return &categoryServiceClient{cc}
}

func (c *categoryServiceClient) CreateCategories(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCategoryRequest, CreateCategoriesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CategoryService_ServiceDesc.Streams[0], CategoryService_CreateCategories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateCategoryRequest, CreateCategoriesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoryService_CreateCategoriesClient = grpc.ClientStreamingClient[CreateCategoryRequest, CreateCategoriesResponse]

// CategoryServiceServer is the server API for CategoryService service.
// All implementations must embed UnimplementedCategoryServiceServer
// for forward compatibility.
type CategoryServiceServer interface {
	CreateCategories(grpc.ClientStreamingServer[CreateCategoryRequest, CreateCategoriesResponse]) error
	mustEmbedUnimplementedCategoryServiceServer()
}

// UnimplementedCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryServiceServer struct{}

func (UnimplementedCategoryServiceServer) CreateCategories(grpc.ClientStreamingServer[CreateCategoryRequest, CreateCategoriesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateCategories not implemented")
}
func (UnimplementedCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {}
func (UnimplementedCategoryServiceServer) testEmbeddedByValue()                         {}

// UnsafeCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServiceServer will
// result in compilation errors.
type UnsafeCategoryServiceServer interface {
	mustEmbedUnimplementedCategoryServiceServer()
}

func RegisterCategoryServiceServer(s grpc.ServiceRegistrar, srv CategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryService_ServiceDesc, srv)
}

func _CategoryService_CreateCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CategoryServiceServer).CreateCategories(&grpc.GenericServerStream[CreateCategoryRequest, CreateCategoriesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CategoryService_CreateCategoriesServer = grpc.ClientStreamingServer[CreateCategoryRequest, CreateCategoriesResponse]

// CategoryService_ServiceDesc is the grpc.ServiceDesc for CategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebase.CategoryService",
	HandlerType: (*CategoryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCategories",
			Handler:       _CategoryService_CreateCategories_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "movie_proto.proto",
}

const (
	MovieService_CreateMovies_FullMethodName                              = "/moviebase.MovieService/CreateMovies"
	MovieService_GetMoviesByUserIDAndCategoryID_FullMethodName            = "/moviebase.MovieService/GetMoviesByUserIDAndCategoryID"
	MovieService_GetMoviesByUserID_FullMethodName                         = "/moviebase.MovieService/GetMoviesByUserID"
	MovieService_GetMoviesByUserIDAndName_FullMethodName                  = "/moviebase.MovieService/GetMoviesByUserIDAndName"
	MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAt_FullMethodName = "/moviebase.MovieService/GetMoviesByUserIDAndCategoryIDByCreatedAt"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	CreateMovies(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateMovieRequest, CreateMoviesResponse], error)
	GetMoviesByUserIDAndCategoryID(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponse], error)
	GetMoviesByUserID(ctx context.Context, in *GetMoviesRequestByUserIDOnly, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDOnly], error)
	GetMoviesByUserIDAndName(ctx context.Context, in *GetMoviesRequestByUserIDAndName, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndName], error)
	GetMoviesByUserIDAndCategoryIDByCreatedAt(ctx context.Context, in *GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt], error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateMovies(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateMovieRequest, CreateMoviesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[0], MovieService_CreateMovies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateMovieRequest, CreateMoviesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_CreateMoviesClient = grpc.ClientStreamingClient[CreateMovieRequest, CreateMoviesResponse]

func (c *movieServiceClient) GetMoviesByUserIDAndCategoryID(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[1], MovieService_GetMoviesByUserIDAndCategoryID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMoviesRequest, GetMoviesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndCategoryIDClient = grpc.ServerStreamingClient[GetMoviesResponse]

func (c *movieServiceClient) GetMoviesByUserID(ctx context.Context, in *GetMoviesRequestByUserIDOnly, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDOnly], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[2], MovieService_GetMoviesByUserID_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMoviesRequestByUserIDOnly, GetMoviesResponseByUserIDOnly]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDClient = grpc.ServerStreamingClient[GetMoviesResponseByUserIDOnly]

func (c *movieServiceClient) GetMoviesByUserIDAndName(ctx context.Context, in *GetMoviesRequestByUserIDAndName, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndName], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[3], MovieService_GetMoviesByUserIDAndName_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMoviesRequestByUserIDAndName, GetMoviesResponseByUserIDAndName]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndNameClient = grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndName]

func (c *movieServiceClient) GetMoviesByUserIDAndCategoryIDByCreatedAt(ctx context.Context, in *GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[4], MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAtClient = grpc.ServerStreamingClient[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility.
type MovieServiceServer interface {
	CreateMovies(grpc.ClientStreamingServer[CreateMovieRequest, CreateMoviesResponse]) error
	GetMoviesByUserIDAndCategoryID(*GetMoviesRequest, grpc.ServerStreamingServer[GetMoviesResponse]) error
	GetMoviesByUserID(*GetMoviesRequestByUserIDOnly, grpc.ServerStreamingServer[GetMoviesResponseByUserIDOnly]) error
	GetMoviesByUserIDAndName(*GetMoviesRequestByUserIDAndName, grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndName]) error
	GetMoviesByUserIDAndCategoryIDByCreatedAt(*GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]) error
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieServiceServer struct{}

func (UnimplementedMovieServiceServer) CreateMovies(grpc.ClientStreamingServer[CreateMovieRequest, CreateMoviesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesByUserIDAndCategoryID(*GetMoviesRequest, grpc.ServerStreamingServer[GetMoviesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMoviesByUserIDAndCategoryID not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesByUserID(*GetMoviesRequestByUserIDOnly, grpc.ServerStreamingServer[GetMoviesResponseByUserIDOnly]) error {
	return status.Errorf(codes.Unimplemented, "method GetMoviesByUserID not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesByUserIDAndName(*GetMoviesRequestByUserIDAndName, grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndName]) error {
	return status.Errorf(codes.Unimplemented, "method GetMoviesByUserIDAndName not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesByUserIDAndCategoryIDByCreatedAt(*GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]) error {
	return status.Errorf(codes.Unimplemented, "method GetMoviesByUserIDAndCategoryIDByCreatedAt not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}
func (UnimplementedMovieServiceServer) testEmbeddedByValue()                      {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).CreateMovies(&grpc.GenericServerStream[CreateMovieRequest, CreateMoviesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_CreateMoviesServer = grpc.ClientStreamingServer[CreateMovieRequest, CreateMoviesResponse]

func _MovieService_GetMoviesByUserIDAndCategoryID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMoviesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMoviesByUserIDAndCategoryID(m, &grpc.GenericServerStream[GetMoviesRequest, GetMoviesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndCategoryIDServer = grpc.ServerStreamingServer[GetMoviesResponse]

func _MovieService_GetMoviesByUserID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMoviesRequestByUserIDOnly)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMoviesByUserID(m, &grpc.GenericServerStream[GetMoviesRequestByUserIDOnly, GetMoviesResponseByUserIDOnly]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDServer = grpc.ServerStreamingServer[GetMoviesResponseByUserIDOnly]

func _MovieService_GetMoviesByUserIDAndName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMoviesRequestByUserIDAndName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMoviesByUserIDAndName(m, &grpc.GenericServerStream[GetMoviesRequestByUserIDAndName, GetMoviesResponseByUserIDAndName]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndNameServer = grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndName]

func _MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMoviesRequestByUserIDAndCategoryIDByCreatedAt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMoviesByUserIDAndCategoryIDByCreatedAt(m, &grpc.GenericServerStream[GetMoviesRequestByUserIDAndCategoryIDByCreatedAt, GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAtServer = grpc.ServerStreamingServer[GetMoviesResponseByUserIDAndCategoryIDByCreatedAt]

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebase.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMovies",
			Handler:       _MovieService_CreateMovies_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMoviesByUserIDAndCategoryID",
			Handler:       _MovieService_GetMoviesByUserIDAndCategoryID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMoviesByUserID",
			Handler:       _MovieService_GetMoviesByUserID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMoviesByUserIDAndName",
			Handler:       _MovieService_GetMoviesByUserIDAndName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMoviesByUserIDAndCategoryIDByCreatedAt",
			Handler:       _MovieService_GetMoviesByUserIDAndCategoryIDByCreatedAt_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "movie_proto.proto",
}
